namespace SteamPrefill.Settings
{
    //TODO move to root folder
    public static class AppConfig
    {
        static AppConfig()
        {
            // Create required folders
            Directory.CreateDirectory(ConfigDir);
            Directory.CreateDirectory(CacheDir);

            MigrateOldCacheDir();
        }

#if DEBUG

        public static bool EnableSteamKitDebugLogs => false;
        public static bool SkipDownloads { get; set; }

#endif

        public static string SteamCdnUrl => "lancache.steamcontent.com";

        public static bool VerboseLogs { get; set; }
        
        /// <summary>
        /// Downloaded manifests, as well as other metadata, are saved into this directory to speedup future prefill runs.
        /// All data in here should be able to be deleted safely.
        /// </summary>
        public static readonly string CacheDir = GetCacheDirBaseDirectories();

        /// <summary>
        /// Increment when there is a breaking change made to the files in the cache directory
        /// </summary>
        private const string CacheDirVersion = "v1";

        //TODO remove after 11/20/2022
        public static readonly string OldCacheDir = Path.Combine(AppContext.BaseDirectory, "Cache");

        /// <summary>
        /// Contains user configuration.  Should not be deleted, doing so will reset the app back to defaults.
        /// </summary>
        public static readonly string ConfigDir = Path.Combine(AppContext.BaseDirectory, "Config");

        #region Serialization file paths

        public static readonly string AccountSettingsStorePath = Path.Combine(ConfigDir, "account.config");

        /// <summary>
        /// Generated by the 'benchmark setup' command, is portable and can be moved with the app.
        /// </summary>
        public static readonly string BenchmarkWorkloadPath = Path.Combine(ConfigDir, "benchmarkWorkload.bin");
        public static readonly string UserSelectedAppsPath = Path.Combine(ConfigDir, "selectedAppsToPrefill.json");

        #endregion
        
        /// <summary>
        /// Gets the base directories for the cache folder, determined by which Operating System the app is currently running on.
        /// </summary>
        /// <returns></returns>
        /// <exception cref="NotSupportedException"></exception>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        private static string GetCacheDirBaseDirectories()
        {
            if (System.OperatingSystem.IsWindows())
            {
                string pathAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                return Path.Combine(pathAppData, "SteamPrefill", "Cache", CacheDirVersion);
            }
            if (System.OperatingSystem.IsLinux())
            {
                // Gets base directories for the XDG Base Directory specification (Linux)
                string pathHome = Environment.GetEnvironmentVariable("HOME") 
                                  ?? throw new ArgumentNullException("HOME", "Could not determine HOME directory");

                string pathXdgCacheHome = Environment.GetEnvironmentVariable("XDG_CACHE_HOME")
                                          ?? Path.Combine(pathHome, ".cache");

                return Path.Combine(pathXdgCacheHome, "SteamPrefill", CacheDirVersion);
            }
            if (System.OperatingSystem.IsMacOS())
            {
                string pathLibraryCaches = Path.GetFullPath("~/Library/Caches");
                return Path.Combine(pathLibraryCaches, "SteamPrefill", CacheDirVersion);
            }

            throw new NotSupportedException($"Unknown platform {RuntimeInformation.OSDescription}");
        }

        //TODO remove after 11/20/2022
        private static void MigrateOldCacheDir()
        {
            if (Directory.Exists(OldCacheDir))
            {
                Directory.Delete(OldCacheDir, true);
            }
        }
    }
}